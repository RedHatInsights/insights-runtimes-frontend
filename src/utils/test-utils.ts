import { JvmInstance, RuntimesInventoryResponse } from '../api/interfaces';

export const emptyResponse: RuntimesInventoryResponse = { response: [] };

export const fooInstance: JvmInstance = {
  id: 'fooId',
  accountId: 'accountId',
  orgId: 'orgId',
  hostname: 'fooHostname',
  launchTime: 1706245200000,
  vendor: 'fooVendor',
  versionString: 'fooVersionString',
  version: 'fooVersion',
  majorVersion: 17,
  osArch: 'fooOsArch',
  processors: 12,
  heapMin: 0,
  heapMax: 9999,
  details: { 'app.name': 'foo-app' },
  created: 'fooCreated',
  javaClassVersion: 'fooJavaClassVersion',
  javaSpecificationVendor: 'fooJavaSpecificationVendor',
  javaVendor: 'fooJavaVendor',
  javaVendorVersion: 'fooJavaVendorVersion',
  javaVmName: 'fooJavaVmName',
  javaVmVendor: 'fooJavaVmVendor',
  jvmHeapGcDetails: 'fooJvmHeapGcDetails',
  jvmPid: 'fooJvmPid',
  jvmReportTime: 'fooJvmReportTime',
  systemOsName: 'fooSystemOsName',
  systemOsVersion: 'fooSystemOsVersion',
  javaHome: 'fooJavaHome',
  javaLibraryPath: 'fooJavaLibraryPath',
  javaCommand: 'fooJavaCommand',
  javaClassPath: 'fooJavaClassPath',
  jvmPackages: 'fooJvmPackages',
  jvmArgs: 'fooJvmArgs',
  workload: 'fooWorkload',
  isOcp: false,
};

export const mockInstance: JvmInstance = {
  id: 'mockId',
  accountId: 'accountId',
  orgId: 'orgId',
  hostname: 'mockHostname',
  launchTime: 1706245200001,
  vendor: 'mockVendor',
  versionString: 'mockVersionString',
  version: 'mockVersion',
  majorVersion: 17,
  osArch: 'mockOsArch',
  processors: 12,
  heapMin: 0,
  heapMax: 9999,
  details: { 'app.name': 'foo-app' },
  created: 'mockCreated',
  javaClassVersion: 'mockJavaClassVersion',
  javaSpecificationVendor: 'mockJavaSpecificationVendor',
  javaVendor: 'mockJavaVendor',
  javaVendorVersion: 'mockJavaVendorVersion',
  javaVmName: 'mockJavaVmName',
  javaVmVendor: 'mockJavaVmVendor',
  jvmHeapGcDetails: 'mockJvmHeapGcDetails',
  jvmPid: 'mockJvmPid',
  jvmReportTime: 'mockJvmReportTime',
  systemOsName: 'mockSystemOsName',
  systemOsVersion: 'mockSystemOsVersion',
  javaHome: 'mockJavaHome',
  javaLibraryPath: 'mockJavaLibraryPath',
  javaCommand: 'mockJavaCommand',
  javaClassPath: 'mockJavaClassPath',
  jvmPackages: 'mockJvmPackages',
  jvmArgs: 'mockJvmArgs',
  workload: 'mockWorkload',
  isOcp: false,
};
